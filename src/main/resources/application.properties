# Profiles can be used to determine the @Bean's that are picked up in @Configuration classes
# We set the profile here, or as a program argument (program arguments take priority)
#spring.profiles.active=dev

# We can also have differently named application.properties files to determine our 'profile', such as 
# application-test.properties. We do not need to specify a @Profile or @Bean in this case, as
# Spring will just pick up the right application-XXX.properties file depending on the profile
# specified as a program argument, e.g. --spring.profiles.active=test

my.value1=value from application properties file

#RandomValuePropertySource can produce test data or API keys by producing random int/long/string's
my.value.random=${random.int}